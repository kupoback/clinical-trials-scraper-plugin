<?php

namespace Merck_Scraper\Admin;

/**
 * Generated by the WordPress Meta Box Generator
 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
 *
 * Retrieving the values:
 * Latitude = get_post_meta( get_the_ID(), 'ms_location_latitude', true )
 * Longitude = get_post_meta( get_the_ID(), 'ms_location_longitude', true )
 */
class MSLocationMetaBox
{

    private $config = '{"title":"Geolocation","description":"This field triggers to fetching of a locations data and saves them. If relying on Override data, please save the data before hitting the button.","prefix":"ms_location_","domain":"merck-scraper","class_name":"MSLocationMetaBox","context":"normal","priority":"default","cpt":"locations","fields":[{"type":"text","label":"Latitude","id":"ms_location_latitude","class":"col-12 col-lg-6"},{"type":"text","label":"Longitude","id":"ms_location_longitude","class":"col-12 col-lg-6"}]}';

    public function __construct()
    {
        $this->config = json_decode($this->config, true);
        self::processCustomPostTypes();
        // add_action('add_meta_boxes', [$this, 'addMetaBoxes']);
        // add_action('admin_head', [$this, 'adminHead']);
        // add_action('save_post', [$this, 'savePost']);
    }

    public function processCustomPostTypes()
    {
        if (!empty($this->config['cpt'])) {
            if (empty($this->config['post-type'])) {
                $this->config['post-type'] = [];
            }
            $parts                     = explode(',', $this->config['cpt']);
            $parts                     = array_map('trim', $parts);
            $this->config['post-type'] = array_merge($this->config['post-type'], $parts);
        }
    }

    public function addMetaBoxes()
    {
        foreach ($this->config['post-type'] as $screen) {
            add_meta_box(
                sanitize_title($this->config['title']),
                $this->config['title'],
                [$this, 'addMetaBoxCallback'],
                $screen,
                $this->config['context'],
                $this->config['priority']
            );
        }
    }

    // public function adminHead()
    // {
    //     global $typenow;
    //     if (in_array($typenow, $this->config['post-type'])) {
    //     }
    // }

    // public function savePost($post_id)
    // {
    //     foreach ($this->config['fields'] as $field) {
    //         if (isset($_POST[$field['id']])) {
    //             $sanitized = sanitize_text_field($_POST[$field['id']]);
    //             update_post_meta($post_id, $field['id'], $sanitized);
    //         }
    //     }
    // }

    public function addMetaBoxCallback()
    {
        echo '<div class="rwp-description">' . $this->config['description'] . '</div>';
        $this->fieldsTable();
        echo '<div id="merck-geolocation"></div>';
    }

    private function fieldsTable()
    {
        ?>
        <div class='row my-3'>
            <?php
            foreach ($this->config['fields'] as $field) {
                ?>
                <div class="<?= $field['class'] ?? ''; ?>">
                    <?= $this->label($field) ?? ''; ?>
                    <?= $this->field($field) ?? ''; ?>
                </div>
                <?php
            }
            ?>
        </div>
        <?php
    }

    private function label($field)
    {
        printf(
            '<label class="form-label" for="%s">%s</label>',
            $field['id'],
            $field['label']
        );
    }

    private function field($field)
    {
        self::input($field);
    }

    private function input($field)
    {
        printf(
            '<input class="form-control %s" id="%s" name="%s" %s type="%s" value="%s" readonly aria-readonly="true">',
            '',
            $field['id'],
            $field['id'],
            isset($field['pattern']) ? "pattern='{$field['pattern']}'" : '',
            $field['type'],
            $this->value($field)
        );
    }

    private function value($field)
    {
        global $post;
        if (metadata_exists('post', $post->ID, $field['id'])) {
            $value = get_post_meta($post->ID, $field['id'], true);
        } elseif (isset($field['default'])) {
            $value = $field['default'];
        } else {
            return '';
        }
        return str_replace('\u0027', "'", $value);
    }
}
