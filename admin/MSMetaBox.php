<?php

namespace Merck_Scraper\Admin;

/**
 * Generated by the WordPress Meta Box Generator
 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
 *
 * Retrieving the values:
 * Official title = get_post_meta( get_the_ID(), 'trial_fields_official-title', true )
 * Study ID = get_post_meta( get_the_ID(), 'trial_fields_study-id', true )
 * Minimum Age = get_post_meta( get_the_ID(), 'trial_fields_minimum-age', true )
 * Maximum Age = get_post_meta( get_the_ID(), 'trial_fields_maximum-age', true )
 * Gender = get_post_meta( get_the_ID(), 'trial_fields_gender', true )
 * MK Formal Number = get_post_meta( get_the_ID(), 'trial_fields_mk-formal-number', true )
 * MK Number = get_post_meta( get_the_ID(), 'trial_fields_mk-number', true )
 * Phase = get_post_meta( get_the_ID(), 'trial_fields_phase', true )
 * Enrollment = get_post_meta( get_the_ID(), 'trial_fields_enrollment', true )
 * Start Date = get_post_meta( get_the_ID(), 'trial_fields_start-date', true )
 * Completion Date = get_post_meta( get_the_ID(), 'trial_fields_completion-date', true )
 * Primary Completion Date = get_post_meta( get_the_ID(), 'trial_fields_primary-completion-date', true )
 * Study Sponsor = get_post_meta( get_the_ID(), 'trial_fields_study-sponsor', true )
 * Regulatory Authority = get_post_meta( get_the_ID(), 'trial_fields_regulatory-authority', true )
 * Protocol Number = get_post_meta( get_the_ID(), 'trial_fields_protocol-number', true )
 */
class MSMetaBox
{

    private $config = '{"title":"Trial Fields","prefix":"trial_fields_","domain":"merck-scraper","class_name":"TrialFields","post-type":["post"],"context":"normal","priority":"core","cpt":"trials",
    "fieldTabs":[
        {"label":"Imported Fields","id":"imported-fields"},
        {"label":"Overwrite Fields","id":"overwrite-fields"}
    ],
    "fields":[
        {"type":"text","label":"Official title","id":"trial_fields_official-title","rowClass":"col-lg-6"},
        {"type":"text","label":"Study ID","id":"trial_fields_study-id","rowClass":"col-lg-6"},
        {"type":"number","label":"Minimum Age","step":"1","id":"trial_fields_minimum-age","rowClass":"col-lg-6"},
        {"type":"number","label":"Maximum Age","step":"1","id":"trial_fields_maximum-age","rowClass":"col-lg-6"},
        {"type":"text","label":"Gender","id":"trial_fields_gender","rowClass":"col-lg-6"},
        {"type":"text","label":"MK Formal Number","id":"trial_fields_mk-formal-number","rowClass":"col-lg-6"},
        {"type":"text","label":"MK Number","id":"trial_fields_mk-number","rowClass":"col-lg-6"},
        {"type":"text","label":"Phase","id":"trial_fields_phase","rowClass":"col-lg-6"},
        {"type":"text","label":"Enrollment","id":"trial_fields_enrollment","rowClass":"col-lg-6"},
        {"type":"text","label":"Start Date","id":"trial_fields_start-date","rowClass":"col-lg-6"},
        {"type":"text","label":"Completion Date","id":"trial_fields_completion-date","rowClass":"col-lg-6"},
        {"type":"text","label":"Primary Completion Date","id":"trial_fields_primary-completion-date","rowClass":"col-lg-6"},
        {"type":"text","label":"Study Sponsor","id":"trial_fields_study-sponsor","rowClass":"col-lg-6"},
        {"type":"text","label":"Regulatory Authority","id":"trial_fields_regulatory-authority","rowClass":"col-lg-6"},
        {"type":"text","label":"Protocol Number","id":"trial_fields_protocol-number","rowClass":"col-lg-6"}
    ]}';

    public function __construct()
    {
        $this->config = json_decode($this->config, true);
        $this->processCpts();
    }

    public function processCpts()
    {
        if (!empty($this->config['cpt'])) {
            if (empty($this->config['post-type'])) {
                $this->config['post-type'] = [];
            }

            $parts = explode(',', $this->config['cpt']);
            $parts = array_map('trim', $parts);

            $this->config['post-type'] = array_merge($this->config['post-type'], $parts);
        }
    }

    public function addMetaBoxes()
    {
        foreach ($this->config['post-type'] as $screen) {
            add_meta_box(
                sanitize_title($this->config['title']),
                $this->config['title'],
                [$this, 'addMetaBoxCb'],
                $screen,
                $this->config['context'],
                $this->config['priority']
            );
        }
    }

    public function savePost($post_id)
    {
        foreach ($this->config['fields'] as $field) {
            switch ($field['type']) {
                default:
                    if (isset($_POST[$field['id']])) {
                        $sanitized = sanitize_text_field($_POST[$field['id']]);
                        update_post_meta($post_id, $field['id'], $sanitized);
                    }
            }
        }
    }

    public function addMetaBoxCb()
    {
        $this->fieldsTable();
    }

    private function fieldsTable()
    {
        $fields = collect($this->config['fields'])
            ->map(function ($field) {
                return sprintf(
                    "<div class='%s mb-2'><div class='label'>%s</div><div class='field'>%s</div></div>",
                    $field['rowClass'] ?? '',
                    $this->label($field),
                    $this->field($field),
                );
            });

        $fields = sprintf(
            '<div class="tab-pane fade row show active" id="imported-fields" role="tabpanel" aria-labelledby="imported-fields-tab">%s</div>',
            $fields->implode('')
        );

        $fields_overwrite = collect($this->config['fields'])
            ->map(function ($field) {
                return sprintf(
                    "<div class='%s mb-2'><div class='label'>%s</div><div class='field'>%s</div></div>",
                    $field['rowClass'] ?? '',
                    $this->label($field, true),
                    $this->field($field, true),
                );
            });

        $fields_overwrite = sprintf(
            '<div class="tab-pane fade row" id="overwrite-fields" role="tabpanel" aria-labelledby="overwrite-fields-tab">%s</div>',
            $fields_overwrite->implode('')
        );

        $tab_names = collect($this->config['fieldTabs'])
            ->map(function ($nav_tab, $index) {
                return sprintf(
                    '<button class="nav-link %3$s" id="%2$s-tab" data-bs-toggle="tab" data-bs-target="#%1$s" type="button" role="tab" aria-controls="%1$s" aria-selected="true">%2$s</button>',
                    $nav_tab['id'],
                    $nav_tab['label'],
                    $index === 0 ? 'active' : ''
                );
            });

        $nav_tabs = sprintf('<nav><div class="nav nav-tabs mb-3" id="nav-fields-tab" role="tablist">%s</div></nav>', $tab_names->implode(''));

        $content = sprintf('<div class="row tab-content">%s</div>', $fields . $fields_overwrite);

        printf(
            '<div class="form-table container-fluid pt-1 pb-3" id="trials-data" role="presentation">%s</div>',
            $nav_tabs . $content
        );
    }

    private function label(array $field, bool $overwrite = false)
    {
        switch ($field['type']) {
            default:
                $output = sprintf(
                    '<label class="form-label" for="%1$s%3$s">%2$s</label>',
                    $field['id'],
                    $field['label'] . ($overwrite ? " Overwrite" : ""),
                    $overwrite ? '-overwrite' : ''
                );
        }
        return $output;
    }

    private function field(array $field, bool $overwrite = false)
    {
        switch ($field['type']) {
            case 'number':
                $output = $this->inputMinMax($field, $overwrite);
                break;
            default:
                $output = $this->input($field, $overwrite);
        }
        return $output;
    }

    private function input(array $field, bool $overwrite = false)
    {
        return sprintf(
            '<input class="regular-text form-control %1$s" id="%2$s" name="%2$s" %3$s type="%4$s" value="%5$s">',
            isset($field['class']) ? $field['class'] : '',
            $field['id'] . ($overwrite ? '-overwrite' : ''),
            isset($field['pattern']) ? "pattern='{$field['pattern']}'" : '',
            $field['type'],
            $this->value($field, $overwrite)
        );
    }

    private function inputMinMax(array $field, bool $overwrite = false)
    {
        return sprintf(
            '<input class="regular-text form-control" id="%1$s" %2$s %3$s name="%1$s" %4$s type="%5$s" value="%6$s">',
            $field['id'] . ($overwrite ? '-overwrite' : ''),
            isset($field['max']) ? "max='{$field['max']}'" : '',
            isset($field['min']) ? "min='{$field['min']}'" : '',
            isset($field['step']) ? "step='{$field['step']}'" : '',
            $field['type'],
            $this->value($field)
        );
    }

    private function value(array $field, bool $overwrite = false)
    {
        global $post;
        $field_id = $field['id'] . ($overwrite ? '-overwrite' : '');
        if (metadata_exists('post', $post->ID, $field_id)) {
            $value = get_post_meta($post->ID, $field_id, true);
        } elseif (isset($field['default'])) {
            $value = $field['default'];
        } else {
            return '';
        }
        return str_replace('\u0027', "'", $value);
    }
}
